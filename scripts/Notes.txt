kubectl create configmap liquibase-changelog-configmap --from-file=changelog.xml=db/changelog/db.changelog-master.xml

--To query mysql pod
kubectl run mysql-client --rm -it --image=mysql:8 --restart=Never -- bash
mysql -h mysql-service -P 27017 -u root -p
then do mysql commands


To deploy in the cluster:-

minikube start --driver=docker 		(only if not already started)
kubectl apply -f k8s/mysql-config.yaml
kubectl apply -f k8s/service-name-config.yaml
kubectl apply -f k8s/mysql-secret.yaml
kubectl apply -f k8s/mysql.yaml  	(wait for startup)
kubectl apply -f k8s/mysql-liquibase-job.yaml
kubectl apply -f k8s/webapp.yaml

kubectl port-forward service/webapp-service 8010:3000



kubectl get all
kubectl get pods
kubectl logs <pod-name> -f
kubectl logs <pod-name>
kubectl delete deployment mysql-deployment
kubectl delete pod <pod-name>




Docker commands:-
docker build -t helloworldtest .
here . is location of dockerfile

docker tag helloworldtest nikhil575/helloworldtest:latest

docker push nikhil575/helloworldtest:latest


Question:- On local development if i want to upgrade one of the microservice for which other team
has made some changes then how to do it ?
Ans:- just reapply the deployment
kubectl apply -f k8s/webapp.yaml
By doing so kubectl will detect that the docke r image version is changed. So it will redeploy.
In case you stick to the :latest tag then do
kubectl rollout restart deployment order-service
make sure that your yaml has  imagePullPolicy: Always

port forwarding commands using script
powershell -ExecutionPolicy Bypass -File start-port-forward.ps1
powershell -ExecutionPolicy Bypass -File stop-port-forward.ps1

to verify whether process is successful "Get-Process kubectl" in powershell



kubectl apply -k overlays/dev/db
kubectl apply -k overlays/dev/liquibase
kubectl apply -k overlays/dev/app
kubectl apply -k overlays/dev/ingress

kubectl apply -k overlays/prod


-------------------------------------------------------------------------------------------------------------------------
ssh -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" ubuntu@13.126.93.71
-------------------------------------------------------------------------------------------------------------------------
Go to EC2 → Instances → Select your instance → Security → Security Groups:
Click the attached security group

In Inbound rules, click Edit

Add rule:

Type: Custom TCP

Port: 8085

Source: My IP (or 0.0.0.0/0 for testing)

Save


-------------------------------------------------------------------------------------------------------------------------
kubectl port-forward --namespace ingress-nginx service/ingress-nginx-controller 8085:80

EC2 accepts requests on 8085. Its then forwarded to port 80 of minikube cluster where ingress controller listens. Ingress controller then forwards it to respective microservice based on routing
With this command EC2 will accept requests made to its localhost:8085. But if you do like <EC2_PUBLIC_IP>:8085 it wont work
because by default, kubectl port-forward only binds to localhost for security reasons. 
So to solve this we tunnel EC2 8085 port to our laptop with below command.

ssh -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" -L 8085:localhost:8085 ubuntu@13.201.10.144
-------------------------------------------------------------------------------------------------------------------------


scp -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" "C:\Users\Nikhil\Desktop\expose-minikube-api.sh" ubuntu@13.232.156.252:/home/ubuntu/projects

scp -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" ubuntu@13.127.57.79:/home/ubuntu/projects/setup-nginx-reverse-proxy.sh "C:\Users\Nikhil\Desktop\fromec2"

-------------------------------------------------------------------------------------------------------------------------

http://13.201.10.144:30080/api/hello-world/hello

curl http://192.168.49.2:30080/api/hello-world/hello


kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.10/config/manifests/metallb-native.yaml

kubectl create secret generic -n metallb-system memberlist \
  --from-literal=secretkey="$(openssl rand -base64 128)"

-------------------------------------------------------------------------------------------------------------------------
forward traffic from ec2 host 80 port to minikube ip on ec2 
make sure aws allows HTTP inbound rule on port 80

sudo apt install -y dos2unix (only if main commands doesnt work)
dos2unix setup-nginx-reverse-proxy.sh (only if main commands doesnt work)

main commands:-
chmod +x setup-nginx-reverse-proxy.sh
./setup-nginx-reverse-proxy.sh

enter IP:- 192.168.49.2 (minikubeip)
enter port:- 80 (EC2 port to listen on)
-------------------------------------------------------------------------------------------------------------------------
clean up existing NGINX setup from EC2:-

sudo systemctl stop nginx
sudo rm -f /etc/nginx/sites-available/default
sudo rm -f /etc/nginx/sites-enabled/default
sudo apt purge -y nginx nginx-common
sudo apt autoremove -y
which nginx
-------------------------------------------------------------------------------------------------------------------------

On local laptop modify etc/hosts to support EC2 public ip:-

powershell -Command "((Get-Content -Path $env:SystemRoot\System32\drivers\etc\hosts) -replace '.*dev-api\.mycompany\.com.*', '13.232.156.252 dev-api.mycompany.com') | Set-Content -Path $env:SystemRoot\System32\drivers\etc\hosts -Force"

-------------------------------------------------------------------------------------------------------------------------
install telepresence on EC2

curl -fL https://app.getambassador.io/download/tel2/linux/amd64/latest/telepresence -o telepresence
chmod a+x telepresence
sudo mv telepresence /usr/local/bin/

check with:- telepresence version
-------------------------------------------------------------------------------------------------------------------------
Install telepresence on Windows local
download exe
keep it in some path
put that path in environment variables

check with :- telepresence version
-------------------------------------------------------------------------------------------------------------------------
nano ~/.kube/config    ---> update server to EC2 public ip with port as 8443   (server: https://13.232.156.252:8443)
sudo apt install socat -y
sudo socat TCP-LISTEN:8443,fork TCP:192.168.49.2:8443  --> asks EC2 to forward incoming traffic on port 8443 to 192.168.49.2:8443 (minikube port 8443)

Also remember to add inbound rules on EC2 to allow port 8443 https and http traffic

Now copy certificates from EC2 minikube to windows local
scp -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" ubuntu@13.232.156.252:/home/ubuntu/.minikube/ca.crt C:\Users\Nikhil\.kube\home\ubuntu\.minikube\
scp -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" ubuntu@13.232.156.252:/home/ubuntu/.minikube/profiles/minikube/client.crt C:\Users\Nikhil\.kube\home\ubuntu\.minikube\profiles\minikube\
scp -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" ubuntu@13.232.156.252:/home/ubuntu/.minikube/profiles/minikube/client.key C:\Users\Nikhil\.kube\home\ubuntu\.minikube\profiles\minikube\

On windows local laptop modify this file:-
C:\Users\Nikhil\.kube\config
replace :- server: https://127.0.0.1:8443
replace the above 3 copied certificate paths


On windows local powershell do this
ssh -i "C:\Users\Nikhil\Desktop\ubuntu-dev-key.pem" -L 8443:192.168.49.2:8443 ubuntu@13.232.156.252
it tells forward local traffic to EC2 

-------------------------------------------------------------------------------------------------------------------------

telepresence connect
telepresence intercept dept-webapp-deployment --port 3001:3001

telepresence quit
-------------------------------------------------------------------------------------------------------------------------
Test within minikube
kubectl run test-pod --image=nginx -it --rm -- bash
curl http://api-gateway:8060/api/hello-world/hello
-------------------------------------------------------------------------------------------------------------------------
